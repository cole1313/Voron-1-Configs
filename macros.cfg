#####################################################################
#   Macros
#####################################################################

#########################################################################################################
#   print_start macro
#########################################################################################################
[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

#homing#
  STATUS_HOMING                           # Sets SB-leds to homing-mode
  CG28                                    # conditional full home
  G90                                     # Absolute position
  BED_MESH_CLEAR                          # Clears old saved bed mesh (if any)
#heating#
  STATUS_HEATING                          # Sets SB-leds to heating-mode
  M190 S{target_bed}                      # Sets the target temp for the bed
  M109 S180                               # Sets the hotend to 180 to melt for z homing
#Quad Gantry Level#
  STATUS_LEVELING                         # Sets SB-leds to leveling-mode
  Attach_Probe_Lock                       # attaches and locks klicky
  CQGL                                    # quad gantry level if not already level
  G28 Z                                   # Homes Z again after QGL
#calibrate z offset
  STATUS_CALIBRATING_Z                    # Sets SB-leds to calibrating z-mode
  CALIBRATE_Z                             # Calibrates Z-offset with klicky
#bed mesh
  STATUS_MESHING                          # Sets SB-leds to bed mesh-mode
  BED_MESH_CALIBRATE                      # calibrates bed mesh
  Dock_Probe_Unlock                       # Unlocks and docks klicky probe
#heating to required temperatures#
  STATUS_HEATING                          # Sets SB-leds to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000        # Goes to center of the bed
  M109 S{target_extruder}                 # Heats the nozzle to printing temp
#printing#
  STATUS_PRINTING                         # Sets SB-leds to printing-mode                            
  LINE_PURGE                              # prints adaptive purge line

###########################################################################
#    macros used in print start
###########################################################################

[gcode_macro CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro CQGL]
gcode:
    {% if printer.quad_gantry_level.applied == False %}
        {% if "xyz" not in printer.toolhead.homed_axes %}
            G28 ; home if not already homed
        {% endif %}
        QUAD_GANTRY_LEVEL
    {% endif %}

[gcode_macro CALIBRATE_Z]
rename_existing: BASE_CALIBRATE_Z
gcode:
    {% set bed_position = params.BED_POSITION|default('None') %}
    #G28                         # can also be a conditional homing macro
    M117 Z-Calibration..
    ATTACH_PROBE                # a macro for fetching the probe first
    {% if bed_position != 'None' %}
      BASE_CALIBRATE_Z BED_POSITION={bed_position}
    {% else %}
      BASE_CALIBRATE_Z
    {% endif %}
    DOCK_PROBE                # and parking it afterwards (or DOCK_PROBE in klicky macros)
    M117

######################################################################
#     print end 
######################################################################


#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
[gcode_macro PRINT_END]
gcode:

# safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    Z_LIFT                                   #lifts the z height to 50 if below to account for sag when motors turn off
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    STATUS_READY
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END


###########################################################################
#    macros used in print end
###########################################################################

# Copyright (C) 2022 Justin Schuh <code@justinschuh.com>
#
# This file may be distributed under the terms of the GNU GPLv3 license.

[gcode_macro z_lift]
gcode:
    {% set z_pos = printer.toolhead.position.z %}
    {% if z_pos < 50 %}
        G1 Z50 F600
    {% else %}
    {% endif %}

######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    #{% set target_extruder = params.EXTRUDER|int %}
    SAVE_GCODE_STATE NAME=M600_state
    #PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
    G91
    G1 E5
    G92 E0
    G1 E-70 F1000
    #G92
    #M109 S{target_extruder}
    RESTORE_GCODE_STATE NAME=M600_state


[gcode_macro F_CONSUMED]
variable_filament_consumed: 0
variable_filament_lenght: 575   # length between the sensor and extruder
gcode:
# save current filament consumption
  SET_GCODE_VARIABLE MACRO=F_CONSUMED VARIABLE=filament_consumed VALUE={printer.print_stats.filament_used}
# start checking filament consumption
  UPDATE_DELAYED_GCODE ID=DELAY_M600 DURATION=1

[delayed_gcode DELAY_M600]
gcode:
# use set for easier reading
  {% set consumed=printer["gcode_macro F_CONSUMED"].filament_consumed %}
  {% set length=printer["gcode_macro F_CONSUMED"].filament_lenght %}
# check if predetermine length is reached
  {% if printer.print_stats.filament_used|float <= (consumed|float + length|float) %}
# start looping this script every second
  UPDATE_DELAYED_GCODE ID=DELAY_M600 DURATION=1
  {% else %}
   M600
  {% endif %}

[gcode_macro Change_PLA]
gcode: 
  PAUSE
  M104 S{180}
  M190 S{60}

[gcode_macro Change_ABS]
gcode: 
  PAUSE
  M104 S{230}
  M190 S{60}



#################################################################################################################################################

#[gcode_macro z_lift]
#gcode:
 #   {% height %}
  #  {% height = gcode_position.z %}
  #  {% if height < 50 %}
  #    G91 ; Set relative positioning mode
  #    G1 Z50 ; Move up 50 mm
  #    G90 ; Set absolute positioning mode
  #  {% endif %}

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        M117 Pausing...
        #BEEP_MORSE CODE=".-..."
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=86400                                                       ; set timeout to 24 hours
        M117 Paused...
       # BEEP_MORSE CODE="-.-"
    {% endif %}


[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        M117 Resuming...
        #BEEP_MORSE CODE=".-..."
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            STATUS_HEATING
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
        STATUS_PRINTING
    {% endif %}


[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    M117 Canceling...
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT
    
 
   





















